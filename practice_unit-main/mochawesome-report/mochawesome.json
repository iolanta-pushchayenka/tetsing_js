{
  "stats": {
    "suites": 19,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-05T10:22:26.074Z",
    "end": "2025-05-05T10:22:26.267Z",
    "duration": 193,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d2a5f7b4-3210-466d-8546-c1554b38997e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "63ab923b-9aa6-484b-80e3-55cdf0a9f29b",
          "title": "Utility Functions",
          "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\arrayUtils.test.js",
          "file": "\\test\\arrayUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d7ad347c-8e36-4a6a-9ccb-7092a51cfe1c",
              "title": "findMax",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\arrayUtils.test.js",
              "file": "\\test\\arrayUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the maximum number in the array",
                  "fullTitle": "Utility Functions findMax should return the maximum number in the array",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(findMax([1, 5, 3, 9, 2])).to.equal(9);",
                  "err": {},
                  "uuid": "e5913bbf-64b6-423a-bd74-3f9bb97afad7",
                  "parentUUID": "d7ad347c-8e36-4a6a-9ccb-7092a51cfe1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not an array",
                  "fullTitle": "Utility Functions findMax should throw an error if input is not an array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => findMax(\"not an array\")).to.throw(\"Input must be an array\");",
                  "err": {},
                  "uuid": "be7f93cf-64bc-4689-b952-7fab27b86656",
                  "parentUUID": "d7ad347c-8e36-4a6a-9ccb-7092a51cfe1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return -Infinity for an empty array",
                  "fullTitle": "Utility Functions findMax should return -Infinity for an empty array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(findMax([])).to.equal(-Infinity);",
                  "err": {},
                  "uuid": "3a8bada9-ede2-43e0-a219-b14ae14f69de",
                  "parentUUID": "d7ad347c-8e36-4a6a-9ccb-7092a51cfe1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5913bbf-64b6-423a-bd74-3f9bb97afad7",
                "be7f93cf-64bc-4689-b952-7fab27b86656",
                "3a8bada9-ede2-43e0-a219-b14ae14f69de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c66b871a-4330-4554-b3cc-62017de84e2c",
              "title": "findMin",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\arrayUtils.test.js",
              "file": "\\test\\arrayUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the minimum number in the array",
                  "fullTitle": "Utility Functions findMin should return the minimum number in the array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(findMin([1, 5, 3, -2, 9])).to.equal(-2);",
                  "err": {},
                  "uuid": "f48678f3-e02c-43c6-b0ae-0d15225eff15",
                  "parentUUID": "c66b871a-4330-4554-b3cc-62017de84e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not an array",
                  "fullTitle": "Utility Functions findMin should throw an error if input is not an array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => findMin(null)).to.throw(\"Input must be an array\");",
                  "err": {},
                  "uuid": "98b409e0-1e55-40ff-8cc7-deb1f3fe970c",
                  "parentUUID": "c66b871a-4330-4554-b3cc-62017de84e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return Infinity for an empty array",
                  "fullTitle": "Utility Functions findMin should return Infinity for an empty array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(findMin([])).to.equal(Infinity);",
                  "err": {},
                  "uuid": "3d78a859-cf56-4430-a744-6db21c0d88e5",
                  "parentUUID": "c66b871a-4330-4554-b3cc-62017de84e2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f48678f3-e02c-43c6-b0ae-0d15225eff15",
                "98b409e0-1e55-40ff-8cc7-deb1f3fe970c",
                "3d78a859-cf56-4430-a744-6db21c0d88e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30e49f6a-09a9-4a82-8ec5-cf12a60ff8ef",
              "title": "removeDuplicates",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\arrayUtils.test.js",
              "file": "\\test\\arrayUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should remove duplicate elements from an array",
                  "fullTitle": "Utility Functions removeDuplicates should remove duplicate elements from an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(removeDuplicates([1, 2, 2, 3, 4, 4, 5])).to.deep.equal([1, 2, 3, 4, 5]);",
                  "err": {},
                  "uuid": "c093f5a3-ef84-43ae-a84a-198fa25e07f9",
                  "parentUUID": "30e49f6a-09a9-4a82-8ec5-cf12a60ff8ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle an array with all unique values",
                  "fullTitle": "Utility Functions removeDuplicates should handle an array with all unique values",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(removeDuplicates([1, 2, 3])).to.deep.equal([1, 2, 3]);",
                  "err": {},
                  "uuid": "823d1311-d260-455d-8d66-80fd3c5759c2",
                  "parentUUID": "30e49f6a-09a9-4a82-8ec5-cf12a60ff8ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an empty array when given an empty array",
                  "fullTitle": "Utility Functions removeDuplicates should return an empty array when given an empty array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(removeDuplicates([])).to.deep.equal([]);",
                  "err": {},
                  "uuid": "d005e554-489c-476c-8794-005bfaf9c409",
                  "parentUUID": "30e49f6a-09a9-4a82-8ec5-cf12a60ff8ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not an array",
                  "fullTitle": "Utility Functions removeDuplicates should throw an error if input is not an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => removeDuplicates(123)).to.throw(\"Input must be an array\");",
                  "err": {},
                  "uuid": "728ebee0-f5e6-472f-86c5-9c6d84ea30e4",
                  "parentUUID": "30e49f6a-09a9-4a82-8ec5-cf12a60ff8ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c093f5a3-ef84-43ae-a84a-198fa25e07f9",
                "823d1311-d260-455d-8d66-80fd3c5759c2",
                "d005e554-489c-476c-8794-005bfaf9c409",
                "728ebee0-f5e6-472f-86c5-9c6d84ea30e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb21e0a6-de0b-43f9-8f77-83cf6febdd9f",
          "title": "Math Functions",
          "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\mathUtils.test.js",
          "file": "\\test\\mathUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "56d2adf9-e77e-40d8-98b6-a8c6daa1693f",
              "title": "add()",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\mathUtils.test.js",
              "file": "\\test\\mathUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 5 for add(2, 3)",
                  "fullTitle": "Math Functions add() should return 5 for add(2, 3)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(2, 3)).to.equal(5);",
                  "err": {},
                  "uuid": "41791c9c-1a0f-4a47-9d9b-554959fcb4b0",
                  "parentUUID": "56d2adf9-e77e-40d8-98b6-a8c6daa1693f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 1 for add(-2, 3)",
                  "fullTitle": "Math Functions add() should return 1 for add(-2, 3)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(-2, 3)).to.equal(1);",
                  "err": {},
                  "uuid": "59be49da-9180-41d5-b664-dd034cc36115",
                  "parentUUID": "56d2adf9-e77e-40d8-98b6-a8c6daa1693f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 0 for add(0, 0)",
                  "fullTitle": "Math Functions add() should return 0 for add(0, 0)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(0, 0)).to.equal(0);",
                  "err": {},
                  "uuid": "23c9cf1d-d4f6-4185-9cb5-e488487bd996",
                  "parentUUID": "56d2adf9-e77e-40d8-98b6-a8c6daa1693f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41791c9c-1a0f-4a47-9d9b-554959fcb4b0",
                "59be49da-9180-41d5-b664-dd034cc36115",
                "23c9cf1d-d4f6-4185-9cb5-e488487bd996"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "88fc7606-a1fe-4ef5-a792-eb98b5d5cebb",
              "title": "subtract()",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\mathUtils.test.js",
              "file": "\\test\\mathUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 2 for subtract(5, 3)",
                  "fullTitle": "Math Functions subtract() should return 2 for subtract(5, 3)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(subtract(5, 3)).to.equal(2);",
                  "err": {},
                  "uuid": "d8858fa3-647a-4f22-92c9-49318a49d86e",
                  "parentUUID": "88fc7606-a1fe-4ef5-a792-eb98b5d5cebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return -2 for subtract(3, 5)",
                  "fullTitle": "Math Functions subtract() should return -2 for subtract(3, 5)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(subtract(3, 5)).to.equal(-2);",
                  "err": {},
                  "uuid": "6c4a066a-65c0-40da-897a-c1ede01a0a51",
                  "parentUUID": "88fc7606-a1fe-4ef5-a792-eb98b5d5cebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 0 for subtract(0, 0)",
                  "fullTitle": "Math Functions subtract() should return 0 for subtract(0, 0)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(subtract(0, 0)).to.equal(0);",
                  "err": {},
                  "uuid": "06e0a9f4-f4e0-479e-b804-110a90e47c57",
                  "parentUUID": "88fc7606-a1fe-4ef5-a792-eb98b5d5cebb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8858fa3-647a-4f22-92c9-49318a49d86e",
                "6c4a066a-65c0-40da-897a-c1ede01a0a51",
                "06e0a9f4-f4e0-479e-b804-110a90e47c57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94e8af8c-a4be-4e2a-8f4b-e5527ea51904",
              "title": "multiply()",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\mathUtils.test.js",
              "file": "\\test\\mathUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 12 for multiply(4, 3)",
                  "fullTitle": "Math Functions multiply() should return 12 for multiply(4, 3)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(multiply(4, 3)).to.equal(12);",
                  "err": {},
                  "uuid": "5ba3893d-2f06-465a-a3cf-ed14421b95b9",
                  "parentUUID": "94e8af8c-a4be-4e2a-8f4b-e5527ea51904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return -6 for multiply(-2, 3)",
                  "fullTitle": "Math Functions multiply() should return -6 for multiply(-2, 3)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(multiply(-2, 3)).to.equal(-6);",
                  "err": {},
                  "uuid": "15da110e-c2d4-43ae-aa54-7179497e2159",
                  "parentUUID": "94e8af8c-a4be-4e2a-8f4b-e5527ea51904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 0 for multiply(0, 5)",
                  "fullTitle": "Math Functions multiply() should return 0 for multiply(0, 5)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(multiply(0, 5)).to.equal(0);",
                  "err": {},
                  "uuid": "f3024fff-b95d-4453-b99b-fc63ec0807f9",
                  "parentUUID": "94e8af8c-a4be-4e2a-8f4b-e5527ea51904",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ba3893d-2f06-465a-a3cf-ed14421b95b9",
                "15da110e-c2d4-43ae-aa54-7179497e2159",
                "f3024fff-b95d-4453-b99b-fc63ec0807f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afabbdf7-e66b-48fb-9185-51eb2374afe0",
              "title": "divide()",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\mathUtils.test.js",
              "file": "\\test\\mathUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 2 for divide(6, 3)",
                  "fullTitle": "Math Functions divide() should return 2 for divide(6, 3)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(divide(6, 3)).to.equal(2);",
                  "err": {},
                  "uuid": "587e1d0f-ad9a-4f53-b28e-bcc540c7ed1d",
                  "parentUUID": "afabbdf7-e66b-48fb-9185-51eb2374afe0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return -3 for divide(-6, 2)",
                  "fullTitle": "Math Functions divide() should return -3 for divide(-6, 2)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(divide(-6, 2)).to.equal(-3);",
                  "err": {},
                  "uuid": "5ee5537a-409e-41b6-b719-f9bb27093ef3",
                  "parentUUID": "afabbdf7-e66b-48fb-9185-51eb2374afe0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error when dividing by zero",
                  "fullTitle": "Math Functions divide() should throw an error when dividing by zero",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => divide(5, 0)).to.throw('Cannot divide by zero');",
                  "err": {},
                  "uuid": "bafae24e-32a3-4f63-b53c-1b2753150a65",
                  "parentUUID": "afabbdf7-e66b-48fb-9185-51eb2374afe0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "587e1d0f-ad9a-4f53-b28e-bcc540c7ed1d",
                "5ee5537a-409e-41b6-b719-f9bb27093ef3",
                "bafae24e-32a3-4f63-b53c-1b2753150a65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "941a1bff-7025-4bcd-b44b-4475104c4a3b",
          "title": "String Utilities",
          "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\stringUtils.test.js",
          "file": "\\test\\stringUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f64e83be-d4c4-400f-a80a-31e4f0d9540b",
              "title": "capitalize",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\stringUtils.test.js",
              "file": "\\test\\stringUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should capitalize the first letter of \"hello\"",
                  "fullTitle": "String Utilities capitalize should capitalize the first letter of \"hello\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(capitalize('hello')).to.equal('Hello');",
                  "err": {},
                  "uuid": "ea850c6f-b865-4f02-b052-f1ec8f2f3b8d",
                  "parentUUID": "f64e83be-d4c4-400f-a80a-31e4f0d9540b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should capitalize the first letter of \"world\"",
                  "fullTitle": "String Utilities capitalize should capitalize the first letter of \"world\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(capitalize('world')).to.equal('World');",
                  "err": {},
                  "uuid": "f80bcc08-befb-48f2-9eab-41d378cfda47",
                  "parentUUID": "f64e83be-d4c4-400f-a80a-31e4f0d9540b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not change an already capitalized string \"Hello\"",
                  "fullTitle": "String Utilities capitalize should not change an already capitalized string \"Hello\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(capitalize('Hello')).to.equal('Hello');",
                  "err": {},
                  "uuid": "75a0e392-6863-4f0c-910e-446616fedee3",
                  "parentUUID": "f64e83be-d4c4-400f-a80a-31e4f0d9540b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an empty string when given an empty string",
                  "fullTitle": "String Utilities capitalize should return an empty string when given an empty string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(capitalize('')).to.equal('');",
                  "err": {},
                  "uuid": "ade98cde-54cd-4de0-869e-392928eff268",
                  "parentUUID": "f64e83be-d4c4-400f-a80a-31e4f0d9540b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not a string",
                  "fullTitle": "String Utilities capitalize should throw an error if input is not a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => capitalize(123)).to.throw(\"Input must be a string\");",
                  "err": {},
                  "uuid": "ae29f72c-3dc4-4a92-b5ea-f75eeea027b9",
                  "parentUUID": "f64e83be-d4c4-400f-a80a-31e4f0d9540b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea850c6f-b865-4f02-b052-f1ec8f2f3b8d",
                "f80bcc08-befb-48f2-9eab-41d378cfda47",
                "75a0e392-6863-4f0c-910e-446616fedee3",
                "ade98cde-54cd-4de0-869e-392928eff268",
                "ae29f72c-3dc4-4a92-b5ea-f75eeea027b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3965f0f7-aa77-4e29-a0ff-3b4443712b39",
              "title": "reverseString",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\stringUtils.test.js",
              "file": "\\test\\stringUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should reverse the string \"hello\"",
                  "fullTitle": "String Utilities reverseString should reverse the string \"hello\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(reverseString('hello')).to.equal('olleh');",
                  "err": {},
                  "uuid": "c910cabd-099f-4fad-9b0d-ef901ecc8d84",
                  "parentUUID": "3965f0f7-aa77-4e29-a0ff-3b4443712b39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reverse the string \"abc\"",
                  "fullTitle": "String Utilities reverseString should reverse the string \"abc\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(reverseString('abc')).to.equal('cba');",
                  "err": {},
                  "uuid": "549a44e9-b0fd-486b-b1f0-64d8d1bba3bc",
                  "parentUUID": "3965f0f7-aa77-4e29-a0ff-3b4443712b39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an empty string when given an empty string",
                  "fullTitle": "String Utilities reverseString should return an empty string when given an empty string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(reverseString('')).to.equal('');",
                  "err": {},
                  "uuid": "b4218550-8726-40f9-b593-7115d56be33a",
                  "parentUUID": "3965f0f7-aa77-4e29-a0ff-3b4443712b39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not a string",
                  "fullTitle": "String Utilities reverseString should throw an error if input is not a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => reverseString(null)).to.throw(\"Input must be a string\");",
                  "err": {},
                  "uuid": "7d834c92-5e3d-445c-a2da-58bc028177d0",
                  "parentUUID": "3965f0f7-aa77-4e29-a0ff-3b4443712b39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c910cabd-099f-4fad-9b0d-ef901ecc8d84",
                "549a44e9-b0fd-486b-b1f0-64d8d1bba3bc",
                "b4218550-8726-40f9-b593-7115d56be33a",
                "7d834c92-5e3d-445c-a2da-58bc028177d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1b53d13-48df-47d2-8cf6-f7601b8211d4",
              "title": "isPalindrome",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\stringUtils.test.js",
              "file": "\\test\\stringUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true for \"mom\" (palindrome)",
                  "fullTitle": "String Utilities isPalindrome should return true for \"mom\" (palindrome)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isPalindrome('mom')).to.be.true;",
                  "err": {},
                  "uuid": "23a77554-5dc9-4905-b3b1-483c85108ede",
                  "parentUUID": "c1b53d13-48df-47d2-8cf6-f7601b8211d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for \"racecar\" (palindrome)",
                  "fullTitle": "String Utilities isPalindrome should return true for \"racecar\" (palindrome)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isPalindrome('racecar')).to.be.true;",
                  "err": {},
                  "uuid": "9316f276-4d84-4c05-bb60-ed5adabc698b",
                  "parentUUID": "c1b53d13-48df-47d2-8cf6-f7601b8211d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true for an empty string (palindrome)",
                  "fullTitle": "String Utilities isPalindrome should return true for an empty string (palindrome)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isPalindrome('')).to.be.true; // empty string is a valid palindrome",
                  "err": {},
                  "uuid": "d5552028-3540-4dc4-b32b-7b96b0111731",
                  "parentUUID": "c1b53d13-48df-47d2-8cf6-f7601b8211d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for \"hello\" (not a palindrome)",
                  "fullTitle": "String Utilities isPalindrome should return false for \"hello\" (not a palindrome)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isPalindrome('hello')).to.be.false;",
                  "err": {},
                  "uuid": "6e70f306-546b-40d6-9868-0d95b8b8743c",
                  "parentUUID": "c1b53d13-48df-47d2-8cf6-f7601b8211d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false for \"world\" (not a palindrome)",
                  "fullTitle": "String Utilities isPalindrome should return false for \"world\" (not a palindrome)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isPalindrome('world')).to.be.false;",
                  "err": {},
                  "uuid": "60e6372b-04a4-4121-b7a0-449f66d18e72",
                  "parentUUID": "c1b53d13-48df-47d2-8cf6-f7601b8211d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be case-sensitive, returning false for \"Mom\"",
                  "fullTitle": "String Utilities isPalindrome should be case-sensitive, returning false for \"Mom\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isPalindrome('Mom')).to.be.false;",
                  "err": {},
                  "uuid": "b3a43a47-6196-4033-bf89-b9f1a9d58961",
                  "parentUUID": "c1b53d13-48df-47d2-8cf6-f7601b8211d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if input is not a string",
                  "fullTitle": "String Utilities isPalindrome should throw an error if input is not a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => isPalindrome({})).to.throw(\"Input must be a string\");",
                  "err": {},
                  "uuid": "d051dd70-0796-4123-b9f2-6abc3568218b",
                  "parentUUID": "c1b53d13-48df-47d2-8cf6-f7601b8211d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23a77554-5dc9-4905-b3b1-483c85108ede",
                "9316f276-4d84-4c05-bb60-ed5adabc698b",
                "d5552028-3540-4dc4-b32b-7b96b0111731",
                "6e70f306-546b-40d6-9868-0d95b8b8743c",
                "60e6372b-04a4-4121-b7a0-449f66d18e72",
                "b3a43a47-6196-4033-bf89-b9f1a9d58961",
                "d051dd70-0796-4123-b9f2-6abc3568218b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a54eeadd-f896-4139-9ce1-4156c6f22578",
          "title": "checkStudentKnowledge",
          "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\studentKnowledgeCheckerUtils.test.js",
          "file": "\\test\\studentKnowledgeCheckerUtils.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"checkStudentKnowledge\"",
              "fullTitle": "checkStudentKnowledge \"before all\" hook in \"checkStudentKnowledge\"",
              "timedOut": false,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code = await readFile(filePath, 'utf8');\n \n \n const sandbox = {};\n vm.createContext(sandbox);\n vm.runInContext(code, sandbox);\n \n checkStudentKnowledge = sandbox.checkStudentKnowledge;",
              "err": {},
              "uuid": "fd88c370-f0e7-4db1-8eff-26cce83e6ce7",
              "parentUUID": "a54eeadd-f896-4139-9ce1-4156c6f22578",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true if all answers are correct",
              "fullTitle": "checkStudentKnowledge should return true if all answers are correct",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const student = { q1: 'a', q2: 'b' };\nconst correct = { q1: 'a', q2: 'b' };\nexpect(checkStudentKnowledge(student, correct)).to.be.true;",
              "err": {},
              "uuid": "b4cda28f-9e44-4f1a-9c73-fc88c9d930fb",
              "parentUUID": "a54eeadd-f896-4139-9ce1-4156c6f22578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if answers are incorrect",
              "fullTitle": "checkStudentKnowledge should return false if answers are incorrect",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const student = { q1: 'a', q2: 'x' };\nconst correct = { q1: 'a', q2: 'b' };\nexpect(checkStudentKnowledge(student, correct)).to.be.false;",
              "err": {},
              "uuid": "057d723f-9456-4ecd-afbb-bd0b6ccb4926",
              "parentUUID": "a54eeadd-f896-4139-9ce1-4156c6f22578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if keys are different",
              "fullTitle": "checkStudentKnowledge should return false if keys are different",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const student = { q1: 'a', q3: 'b' };\nconst correct = { q1: 'a', q2: 'b' };\nexpect(checkStudentKnowledge(student, correct)).to.be.false;",
              "err": {},
              "uuid": "493834db-66ef-457c-9867-aa2195ba2013",
              "parentUUID": "a54eeadd-f896-4139-9ce1-4156c6f22578",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4cda28f-9e44-4f1a-9c73-fc88c9d930fb",
            "057d723f-9456-4ecd-afbb-bd0b6ccb4926",
            "493834db-66ef-457c-9867-aa2195ba2013"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d2941e7f-d85d-4d5f-a9f9-090c030ac720",
          "title": "User Utils",
          "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\usersListUtils.test.js",
          "file": "\\test\\usersListUtils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "088aa32b-0238-418f-8257-789fccd87c81",
              "title": "filterUsersByAge",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\usersListUtils.test.js",
              "file": "\\test\\usersListUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should filter users within the age range",
                  "fullTitle": "User Utils filterUsersByAge should filter users within the age range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = filterUsersByAge(users, 23, 32);\nexpect(result).to.deep.equal([\n  { id: 101, name: 'Sophia', age: 28, email: 'sophia@domain.com' },\n  { id: 103, name: 'Olivia', age: 24, email: 'olivia@domain.com' },\n  { id: 104, name: 'Ethan', age: 29, email: 'ethan@domain.com' }\n]);",
                  "err": {},
                  "uuid": "bf6adfe1-0532-49e9-9ce8-c8a1a7b84c44",
                  "parentUUID": "088aa32b-0238-418f-8257-789fccd87c81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an empty array if no users match",
                  "fullTitle": "User Utils filterUsersByAge should return an empty array if no users match",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = filterUsersByAge(users, 40, 50);\nexpect(result).to.deep.equal([]);",
                  "err": {},
                  "uuid": "340af940-063b-499a-bab8-80887fd29ee7",
                  "parentUUID": "088aa32b-0238-418f-8257-789fccd87c81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if users is not an array",
                  "fullTitle": "User Utils filterUsersByAge should throw an error if users is not an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => filterUsersByAge(null, 20, 30)).to.throw('Users must be an array');",
                  "err": {},
                  "uuid": "636f4e02-2daf-4a0d-acb1-d5cb783a68f8",
                  "parentUUID": "088aa32b-0238-418f-8257-789fccd87c81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf6adfe1-0532-49e9-9ce8-c8a1a7b84c44",
                "340af940-063b-499a-bab8-80887fd29ee7",
                "636f4e02-2daf-4a0d-acb1-d5cb783a68f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "62ae2282-5b4d-442e-b5c1-5a69ec91a478",
              "title": "sortUsersByName",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\usersListUtils.test.js",
              "file": "\\test\\usersListUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return users sorted by name alphabetically",
                  "fullTitle": "User Utils sortUsersByName should return users sorted by name alphabetically",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = sortUsersByName(users);\nexpect(result.map(u => u.name)).to.deep.equal(['Ethan', 'Liam', 'Olivia', 'Sophia']);",
                  "err": {},
                  "uuid": "3647f839-799b-448b-b52d-8f069e973cca",
                  "parentUUID": "62ae2282-5b4d-442e-b5c1-5a69ec91a478",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not mutate the original array",
                  "fullTitle": "User Utils sortUsersByName should not mutate the original array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const original = [...users];\nsortUsersByName(users);\nexpect(users).to.deep.equal(original);",
                  "err": {},
                  "uuid": "dfe8342e-d8d9-4a5f-8905-5f3348e7e9fe",
                  "parentUUID": "62ae2282-5b4d-442e-b5c1-5a69ec91a478",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if users is not an array",
                  "fullTitle": "User Utils sortUsersByName should throw an error if users is not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => sortUsersByName('not array')).to.throw('Users must be an array');",
                  "err": {},
                  "uuid": "dad1dfc5-8648-4c67-9f19-ec99bad0a9f4",
                  "parentUUID": "62ae2282-5b4d-442e-b5c1-5a69ec91a478",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3647f839-799b-448b-b52d-8f069e973cca",
                "dfe8342e-d8d9-4a5f-8905-5f3348e7e9fe",
                "dad1dfc5-8648-4c67-9f19-ec99bad0a9f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "15829684-ae78-46c6-a98b-acdcb6bd3b5b",
              "title": "findUserById",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\usersListUtils.test.js",
              "file": "\\test\\usersListUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should find and return the user by ID",
                  "fullTitle": "User Utils findUserById should find and return the user by ID",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = findUserById(users, 103);\nexpect(result).to.deep.equal({ id: 103, name: 'Olivia', age: 24, email: 'olivia@domain.com' });",
                  "err": {},
                  "uuid": "b84880e6-4e70-4409-8c7c-0e23f37e244c",
                  "parentUUID": "15829684-ae78-46c6-a98b-acdcb6bd3b5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null if user not found",
                  "fullTitle": "User Utils findUserById should return null if user not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = findUserById(users, 999);\nexpect(result).to.be.null;",
                  "err": {},
                  "uuid": "497fb948-e06d-4373-bb3d-b5e44c323e1c",
                  "parentUUID": "15829684-ae78-46c6-a98b-acdcb6bd3b5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if users is not an array",
                  "fullTitle": "User Utils findUserById should throw an error if users is not an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => findUserById({}, 1)).to.throw('Users must be an array');",
                  "err": {},
                  "uuid": "749a0c04-0a79-4084-a932-a7881c8dfaba",
                  "parentUUID": "15829684-ae78-46c6-a98b-acdcb6bd3b5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b84880e6-4e70-4409-8c7c-0e23f37e244c",
                "497fb948-e06d-4373-bb3d-b5e44c323e1c",
                "749a0c04-0a79-4084-a932-a7881c8dfaba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36d8e177-1a5d-4181-9397-bd1907a7e151",
              "title": "isEmailTaken",
              "fullFile": "C:\\Users\\iolan\\Downloads\\practice_unit-main\\practice_unit-main\\test\\usersListUtils.test.js",
              "file": "\\test\\usersListUtils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if email exists",
                  "fullTitle": "User Utils isEmailTaken should return true if email exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isEmailTaken(users, 'liam@domain.com')).to.be.true;",
                  "err": {},
                  "uuid": "eedb5cdd-470a-4dc8-9bbf-47c5b1dd12a1",
                  "parentUUID": "36d8e177-1a5d-4181-9397-bd1907a7e151",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if email does not exist",
                  "fullTitle": "User Utils isEmailTaken should return false if email does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isEmailTaken(users, 'unknown@domain.com')).to.be.false;",
                  "err": {},
                  "uuid": "298da730-119b-4d42-ae79-699f78331389",
                  "parentUUID": "36d8e177-1a5d-4181-9397-bd1907a7e151",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if users is not an array",
                  "fullTitle": "User Utils isEmailTaken should throw an error if users is not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => isEmailTaken('not an array', 'test@test.com')).to.throw('Users must be an array');",
                  "err": {},
                  "uuid": "36da6a44-69db-43e7-aa4e-66f012a9f394",
                  "parentUUID": "36d8e177-1a5d-4181-9397-bd1907a7e151",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eedb5cdd-470a-4dc8-9bbf-47c5b1dd12a1",
                "298da730-119b-4d42-ae79-699f78331389",
                "36da6a44-69db-43e7-aa4e-66f012a9f394"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}